{"Name":"JsBridge","Id":257,"Alias":"jsbridge","Description":"# JsBridge\n\nThis library allows for bidirectional communication with the UIWebView in Xamarin.iOS.\n\n## Usage\n\nReference the JsBridge project or DLL in your Project.\n\nIn the html files where you want to use JsBridge, include a copy of the mt.js file.\n\n```html\n\u003cscript src=\"js/mt.js\"\u003e\u003c/script\u003e\n```\n\nAlernatively you can call InjectMtJavascript on your UIWebView but you will have to call it everytime a new page is loaded and since you usually have to wait until the page is loaded to do so, it is recommended to include mt.js instead to insure it\u0027s available when you need it.\n\n### Browser Side\n\nFrom a UIWebView you can do the following:\n\n#### Log to Native side \n\n```javascript\nMt.API.info( \u0027This message will print on the native side using Console.WriteLine\u0027 );\n```\n\n#### Fire Events on the Native side \n\n```javascript\nMt.App.fireEvent(\u0027promptUser\u0027, { \n    msg: \u0027Hi, this msg is from the browser.\u0027,\n    extra: \u0027You can send more then one property back\u0027,\n    question: \u0027Did you get this message?\u0027,\n    answer: 42\n});\n```\n\n#### Subscribe to Events triggered from the Native side \n\n```javascript\nMt.App.addEventListener(\u0027handleNativeEvent\u0027, function(data) {\n\n    if (data && data.ArbitraryProperty) {\n\t    console.log( data.ArbitraryProperty );\n    }\n\n});\n```\n\n### Native Side\n\nFrom your Xamarin.iOS application you can interact with your UIWebView as follows:\n\n#### Fire Events on the Browser side \n\n```csharp\nviewController.WebView.FireEvent( \"handleNativeEvent\", new {\n\tMessage = \"The Native code says hi back. ;)\",\n    ArbitraryProperty = \"more properties\",\n    Success = true\n});\n```\n\n#### Subscribe to Events triggered from theBrowser side \n\n```csharp\nviewController.WebView.AddEventListener( \"promptUser\", delegate(FireEventData arg) {\n\n    // show a native action sheet\n    BeginInvokeOnMainThread (delegate { \n        var sheet = new UIActionSheet ( arg.Data[\"question\"].ToString() );\n        sheet.AddButton ( \"Yes\" );\n        sheet.AddButton ( \"No\" );\n        sheet.CancelButtonIndex = 1;\n        sheet.ShowInView ( viewController.View );\n    });\n\n});\n```","Version":"1.2","Summary":"Allows for bidirectional communication with the UIWebView in Monotouch.","QuickStart":"## Usage\n\nIn the html files where you want to use JsBridge, include a copy of the mt.js file.\n\n```html\n\u003cscript src=\"js/mt.js\"\u003e\u003c/script\u003e\n```\n\nAlernatively you can call InjectMtJavascript on your UIWebView but you will have to call it everytime a new page is loaded and since you usually have to wait until the page is loaded to do so, it is recommended to include mt.js instead to insure it\u0027s available when you need it.\n\n### Browser Side\n\nFrom a UIWebView you can do the following:\n\n#### Log to Native side \n\n```javascript\nMt.API.info( \u0027This message will print on the native side using Console.WriteLine\u0027 );\n```\n\n#### Fire Events on the Native side \n\n```javascript\nMt.App.fireEvent(\u0027promptUser\u0027, { \n    msg: \u0027Hi, this msg is from the browser.\u0027,\n    extra: \u0027You can send more then one property back\u0027,\n    question: \u0027Did you get this message?\u0027,\n    answer: 42\n});\n```\n\n#### Subscribe to Events triggered from the Native side \n\n```javascript\nMt.App.addEventListener(\u0027handleNativeEvent\u0027, function(data) {\n\n    if (data && data.ArbitraryProperty) {\n\t    console.log( data.ArbitraryProperty );\n    }\n\n});\n```\n\n### Native Side\n\nFrom your Xamarin.iOS application you can interact with your UIWebView as follows:\n\n#### Fire Events on the Browser side \n\n```csharp\nviewController.WebView.FireEvent( \"handleNativeEvent\", new {\n\tMessage = \"The Native code says hi back. ;)\",\n    ArbitraryProperty = \"more properties\",\n    Success = true\n});\n```\n\n#### Subscribe to Events triggered from theBrowser side \n\n```csharp\nviewController.WebView.AddEventListener( \"promptUser\", delegate(FireEventData arg) {\n\n    // show a native action sheet\n    BeginInvokeOnMainThread (delegate { \n        var sheet = new UIActionSheet ( arg.Data[\"question\"].ToString() );\n        sheet.AddButton ( \"Yes\" );\n        sheet.AddButton ( \"No\" );\n        sheet.CancelButtonIndex = 1;\n        sheet.ShowInView ( viewController.View );\n    });\n\n});\n```\n\n## Other Resources\n\n* [Source Code Repository](https://github.com/crdeutsch/MonoTouch-JsBridge)\n","Hash":"6390268230f04ca1b7747f47707561dd","TargetPlatforms":["ios"],"TrialHash":null}