{"Name":"ZXing.Net.Mobile","Id":237,"Alias":"zxing.net.mobile","Description":"ZXing.Net.Mobile is a C#/.NET library based on the open source Barcode Library: ZXing (Zebra Crossing), using the ZXing.Net Port. It works with Xamarin.iOS, Xamarin.Android, and Windows Phone. The goal of ZXing.Net.Mobile is to make scanning barcodes as effortless and painless as possible in your own applications!\r\n\r\nGitHub Project: https://github.com/Redth/ZXing.Net.Mobile\r\n\r\n### Changes\r\n - v1.3.5\r\n   - Views for each Platform - Encapsulates scanner functionality in a reusable view\r\n    - iOS: ZXingScannerView as a UIView\r\n    - Android: ZXingScannerFragment as a Fragment\r\n    - Windows Phone: ZXingScannerControl as a UserControl\r\n   - Scanning logic improvements from ZXing.Net project\r\n   - Compiled against Xamarin Stable channel\r\n   - Performance improvements\r\n   - Bug fixes\r\n\r\n - v1.3.4\r\n   - iOS: Scanning Engine rebuilt to use AVCaptureSession\r\n   - iOS: ZXingScannerView inherits from UIView can now be used independently for advanced use cases\r\n   - Android: Fixed Torch bug on Android\r\n   - Android: Front Cameras now work in Sample by default\r\n   - Performance improvements\r\n\r\n   \r\n - v1.3.3\r\n   - Fixed Android not scanning some barcodes in Portrait\r\n   - Fixed Android scanning very slowly\r\n   - Added to MobileBarcodeScanningOptions: IntervalBetweenAnalyzingFrames to configure how \u0027fast\u0027 frames from the live scanner view are analyzed in an attempt to decode barcodes \r\n\r\n\r\n### Usage\r\n```csharp\r\nbuttonScan.Click += (sender, e) =\u003e {\r\n\r\n  //NOTE: On Android, you MUST pass a Context into the Constructor!\r\n\tvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\n\tscanner.Scan().ContinueWith(t =\u003e {   \r\n   \t\tif (t.Result != null)\r\n    \t\tConsole.WriteLine(\"Scanned Barcode: \" + t.Result.Text);\r\n\t});\r\n\r\n};\r\n```\r\n\r\n### Alpha / Beta Channels\r\nPlease note that this component was built against the **Stable Channel**.  In the past the component was compiled for the Alpha / Beta channels.  If you are working in the Alpha or Beta channel, you may need to go to the GitHub Repository and download the source and compile it manually for the Alpha or Beta.\r\n\r\n###Features\r\n- Xamarin.iOS\r\n- Xamarin.Android\r\n- Windows Phone\r\n- Simple API - Scan in as little as 2 lines of code!\r\n- Scanner as a View - UIView (iOS) / Fragment (Android) / Control (WP)\r\n\r\n\r\n###Custom Overlays\r\nBy default, ZXing.Net.Mobile provides a very simple overlay for your barcode scanning interface.  This overlay consists of a horizontal red line centered in the scanning \u0027window\u0027 and semi-transparent borders on the top and bottom of the non-scanning area.  You also have the opportunity to customize the top and bottom text that appears in this overlay.\r\n\r\nIf you want to customize the overlay, you must create your own View for each platform.  You can customize your overlay like this:\r\n\r\n```csharp\r\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\nscanner.UseCustomOverlay = true;\r\nscanner.CustomOverlay = myCustomOverlayInstance;\r\nscanner.Scan().ContinueWith(t =\u003e { //Handle Result });\r\n```\r\n\r\nKeep in mind that when using a Custom Overlay, you are responsible for the entire overlay (you cannot mix and match custom elements with the default overlay).  The *ZxingScanner* instance has a *CustomOverlay* property, however on each platform this property is of a different type:\r\n\r\n- Xamarin.iOS =\u003e **UIView**\r\n- Xamarin.Android =\u003e **View**\r\n- Windows Phone =\u003e **UIElement**\r\n\r\nAll of the platform samples have examples of custom overlays.\r\n\r\n###Barcode Formats\r\nBy default, all barcode formats are monitored while scanning.  You can change which formats to check for by passing a ZxingScanningOptions instance into the StartScanning method:\r\n\r\n```csharp\r\nvar options = new ZXing.Mobile.MobileBarcodeScanningOptions();\r\noptions.PossibleFormats = new List\u003cZXing.BarcodeFormat\u003e() { \r\n  ZXing.BarcodeFormat.Ean8, ZXing.BarcodeFormat.Ean13 \r\n};\r\n\r\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\nscanner.Scan(options).ContinueWith(t =\u003e { //Handle results });\r\n```\r\n\r\n###Using the ZXingScanner View / Fragment / Control\r\nOn each platform, the ZXing scanner has been implemented as a reusable component (view, fragment, or control), and it is possible to use the reusable component directly without using the MobileBarcodeScanner class at all.  On each platform, the instance of the view/fragment/control contains the necessary properties and methods required to control your scanner.  By default, the default overlay is automatically used, unless you set the CustomOverlay property as well as the UseCustomOverlay property on the instance of the view/fragment/control.  You can use methods such as ToggleTorch() or StopScanning() on the view/fragment/control, however you are responsible for calling StartScanning(...) with a callback and an instance of MobileBarcodeScanningOptions when you are ready for the view\u0027s scanning to begin.  You are also responsible for stopping scanning if you want to cancel at any point.\r\n\r\nThe view/fragment/control classes for each platform are:\r\n\r\n - iOS: ZXingScannerView (UIView) - See ZXingScannerViewController.cs View Controller for an example of how to use this view\r\n - Android: ZXingScannerFragment (Fragment) - See ZXingActivity.cs Activity for an example of how to use this fragment\r\n - Windows Phone: ZXingScannerControl (UserControl) - See ScanPage.xaml Page for an example of how to use this Control\r\n","Version":"1.3.5","Summary":"ZXing.Net.Mobile is a C#/.NET Barcode Scanning Library","QuickStart":"# Getting Started #\r\n\r\nYou can use ZXing.Net.Mobile in your Xamarin.iOS, Xamarin.Android, and Windows Phone apps.  Simply download the component, and reference the dll\u0027s for yoru platform.\r\n\r\n### Usage\r\nThe simplest example of using ZXing.Net.Mobile looks something like this:\r\n\r\n```csharp  \r\nbuttonScan.Click += (sender, e) =\u003e {\r\n\t\r\n\t//NOTE: On Android you MUST pass a Context into the Constructor!\r\n\tvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\n\tscanner.Scan().ContinueWith(t =\u003e {   \r\n   \t\tif (t.Result != null)\r\n    \t\tConsole.WriteLine(\"Scanned Barcode: \" + t.Result.Text);\r\n\t});\r\n\r\n};\r\n```\r\n\r\n### Alpha / Beta Channels\r\nPlease note that this component was built against the **Stable Channel**.  In the past the component was compiled for the Alpha / Beta channels.  If you are working in the Alpha or Beta channel, you may need to go to the GitHub Repository and download the source and compile it manually for the Alpha or Beta.\r\n\r\n###Custom Overlays\r\nBy default, ZXing.Net.Mobile provides a very simple overlay for your barcode scanning interface.  This overlay consists of a horizontal red line centered in the scanning \u0027window\u0027 and semi-transparent borders on the top and bottom of the non-scanning area.  You also have the opportunity to customize the top and bottom text that appears in this overlay.\r\n\r\nIf you want to customize the overlay, you must create your own View for each platform.  You can customize your overlay like this:\r\n\r\n```csharp\r\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\nscanner.UseCustomOverlay = true;\r\nscanner.CustomOverlay = myCustomOverlayInstance;\r\nscanner.Scan().ContinueWith(t =\u003e { //Handle Result });\r\n```\r\n\r\nKeep in mind that when using a Custom Overlay, you are responsible for the entire overlay (you cannot mix and match custom elements with the default overlay).  The *ZxingScanner* instance has a *CustomOverlay* property, however on each platform this property is of a different type:\r\n\r\n- Xamarin.iOS =\u003e **UIView**\r\n- Xamarin.Android =\u003e **View**\r\n- Windows Phone =\u003e **UIElement**\r\n\r\nAll of the platform samples have examples of custom overlays.\r\n\r\n###Barcode Formats\r\nBy default, all barcode formats are monitored while scanning.  You can change which formats to check for by passing a ZxingScanningOptions instance into the StartScanning method:\r\n\r\n```csharp\r\nvar options = new ZXing.Mobile.MobileBarcodeScanningOptions();\r\noptions.PossibleFormats = new List\u003cZXing.BarcodeFormat\u003e() { \r\n    ZXing.BarcodeFormat.Ean8, ZXing.BarcodeFormat.Ean13 \r\n};\r\n\r\nvar scanner = new ZXing.Mobile.MobileBarcodeScanner();\r\nscanner.Scan(options).ContinueWith(t =\u003e { //Handle results });\r\n```\r\n\r\n###Using the ZXingScanner View / Fragment / Control\r\nOn each platform, the ZXing scanner has been implemented as a reusable component (view, fragment, or control), and it is possible to use the reusable component directly without using the MobileBarcodeScanner class at all.  On each platform, the instance of the view/fragment/control contains the necessary properties and methods required to control your scanner.  By default, the default overlay is automatically used, unless you set the CustomOverlay property as well as the UseCustomOverlay property on the instance of the view/fragment/control.  You can use methods such as ToggleTorch() or StopScanning() on the view/fragment/control, however you are responsible for calling StartScanning(...) with a callback and an instance of MobileBarcodeScanningOptions when you are ready for the view\u0027s scanning to begin.  You are also responsible for stopping scanning if you want to cancel at any point.\r\n\r\nThe view/fragment/control classes for each platform are:\r\n\r\n - iOS: ZXingScannerView (UIView) - See ZXingScannerViewController.cs View Controller for an example of how to use this view\r\n - Android: ZXingScannerFragment (Fragment) - See ZXingActivity.cs Activity for an example of how to use this fragment\r\n - Windows Phone: ZXingScannerControl (UserControl) - See ScanPage.xaml Page for an example of how to use this Control\r\n\r\n\r\n###Important Additional Notes\r\n\r\n- Scanning will crash the iOS Simulator.  Currently scanning only works on devices in Xamarin.iOS\r\n- On Android, you must pass a Context into the MobileBarcodeScanner constructor!\r\n\r\n###License\r\nApache ZXing.Net.Mobile Copyright 2012 The Apache Software Foundation\r\nThis product includes software developed at The Apache Software Foundation (http://www.apache.org/).\r\n\r\n### ZXing.Net\r\nZXing.Net is released under the Apache 2.0 license.\r\nZXing.Net can be found here: http://code.google.com/p/zxing/\r\nA copy of the Apache 2.0 license can be found here: http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n### ZXing\r\nZXing is released under the Apache 2.0 license.\r\nZXing can be found here: http://code.google.com/p/zxing/\r\nA copy of the Apache 2.0 license can be found here: http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n### System.Drawing\r\nThe System.Drawing classes included are from the mono source code which is property of Novell.\r\nCopyright notice is intact in source code files.\r\n","Hash":"b7204b16667b27e7b762826b54b4a60d","TargetPlatforms":["ios","android","winphone-7.0","winphone-7.1","mobile"],"TrialHash":null}